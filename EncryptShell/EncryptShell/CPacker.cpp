#include "CPacker.h"
#include <compressapi.h>
#pragma comment(lib, "Cabinet.lib")


CPacker::CPacker() {
    m_PE = NULL;
    m_pImportTableBuff = NULL;

    m_pCompressDataBuff = NULL;
    m_pShellCodeBuff = NULL;
    m_pNewPeHeader = NULL;
}


CPacker::~CPacker() {
    if (m_PE != NULL) {
        delete m_PE;
        m_PE = NULL;
    }

    if (m_pImportTableBuff != NULL) {
        delete[] m_pImportTableBuff;
        m_pImportTableBuff = NULL;
    }
}


BOOL CPacker::Pack(const char* pSrcPath, const char* pDstPath) {
    //1、PE格式解析
    m_PE = new CPe(pSrcPath);

    //2、导入表处理
    PBYTE pTmp = new BYTE[m_PE->GetFileSize() >> 2];
    if (pTmp == NULL) {
        return FALSE;
    }
    m_dwImportTableSize = MoveImportTable(pTmp);
    if (m_dwImportTableSize != NULL) {
        m_pImportTableBuff = new BYTE[m_dwImportTableSize];
        if (m_pImportTableBuff == NULL) {
            return FALSE;
        }
        MyMemCopy(m_pImportTableBuff, pTmp, m_dwImportTableSize);

        // 清除原导入表
        // ClearImportTable();
    }

    // 重定位表处理
    MyZeroMem(pTmp, m_PE->GetFileSize() >> 2);
    m_dwRelocTableSize = MoveRelocTable(pTmp);
    if (m_dwRelocTableSize != NULL) {
        m_pRelocBuff = new BYTE[m_dwRelocTableSize];
        if (m_pRelocBuff == NULL) {
            return FALSE;
        }
        MyMemCopy(m_pRelocBuff, pTmp, m_dwRelocTableSize);

        // 清除原重定位表，将新的重定位转储拷贝到重定位表的位置
        // ClearRelocTable();
    }

    if (pTmp != NULL) {
        delete[] pTmp;
    }

    //3、压缩处理
    if (!DoCompress()) {
        return FALSE;
    }

    //4、获取壳代码
    if (!GetShellCode()) {
        return FALSE;
    }

    //5、构造新的节表
    if (!RebuildSection()) {
        return FALSE;
    }

    //6、构造新PE文件的PE头
    if (!RebuildPeHeader()) {
        return FALSE;
    }

    //7、写文件
    if (!WritePackerFile(pDstPath)) {
        return FALSE;
    }

    return TRUE;
}


DWORD CPacker::MoveImportTable(PBYTE pImportTableBuff) {
    /*
    {
        DWORD  FirstThunk    // RVA,IAT表的位置
        BYTE   DllNameLength
        String DllName
        db     00
        DWORD  InitCount
        BYTE   FunNameLength // 如果等于0，表示是序号
        String FunName
        db     00            // 表示字符串的结尾
        dd     0             // 4字节0表示Dll信息结尾
    }
    */
    PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)m_PE->GetDosHeaderPointer();
    PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)m_PE->GetImportDirectoryPointer();
    if (pImport == NULL) {
        return 0;
    }

    // 遍历导入表
    PBYTE pFunNum = NULL;
    PBYTE pData = pImportTableBuff;
    IMAGE_IMPORT_DESCRIPTOR ZeroImport;
    MyZeroMem(&ZeroImport, sizeof(ZeroImport));

    while (MyMemCmp(pImport, &ZeroImport, sizeof(IMAGE_IMPORT_DESCRIPTOR)) != 0) {

        // 判断是否为有效导入表项
        PIMAGE_THUNK_DATA32 pIat = (PIMAGE_THUNK_DATA32)((char*)pDosHeader + CPe::Rva2Fa(pImport->FirstThunk, pDosHeader));
        if (pIat->u1.AddressOfData == NULL) {
            pImport++;
            continue;
        }

        // 保存 FirstThunk DllNameLength DllName InitCount
        *(DWORD*)pData = pImport->FirstThunk;
        pData += sizeof(DWORD);

        char* pDllName = (char*)pDosHeader + CPe::Rva2Fa(pImport->Name, pDosHeader);
        *(BYTE*)pData = (BYTE)MyStrLen(pDllName);
        pData += sizeof(BYTE);
        MyMemCopy(pData, pDllName, MyStrLen(pDllName) + 1);
        pData += MyStrLen(pDllName) + 1;

        pFunNum = pData;
        *(DWORD*)pFunNum = 0;
        pData += sizeof(DWORD);

        // 判断是使用INT还是IAT
        DWORD dwThunkDataRva = pImport->OriginalFirstThunk;
        if (dwThunkDataRva == NULL) {
            dwThunkDataRva = pImport->FirstThunk;
        }
        PIMAGE_THUNK_DATA32 pThunkData = (PIMAGE_THUNK_DATA32)((char*)pDosHeader + CPe::Rva2Fa(dwThunkDataRva, pDosHeader));

        // 遍历INT/IAT
        while (pThunkData->u1.AddressOfData != NULL) {
            DWORD dwFunIndex = NULL;
            if (pThunkData->u1.AddressOfData > 0x80000000) {
                // 序号
                dwFunIndex = pThunkData->u1.Ordinal & 0xffff;
                *(BYTE*)pData = 0;
                pData += sizeof(BYTE);
                *(DWORD*)pData = dwFunIndex;
                pData += sizeof(DWORD);
            }
            else {
                // 名称
                dwFunIndex = (DWORD)pDosHeader + CPe::Rva2Fa(pThunkData->u1.AddressOfData, pDosHeader) + 2;
                *(BYTE*)pData = (BYTE)MyStrLen((char*)dwFunIndex);
                pData += sizeof(BYTE);
                MyMemCopy(pData, (char*)dwFunIndex, MyStrLen((char*)dwFunIndex) + 1);
                pData += MyStrLen((char*)dwFunIndex) + 1;
            }

            (*(DWORD*)pFunNum)++;
            pThunkData++;
        }

        *(DWORD*)pData = 0;
        pData += sizeof(DWORD);
        pImport++;
    }

    return (DWORD)pData - (DWORD)pImportTableBuff;
}


void CPacker::ClearImportTable() {
    /*
        clear DllName
        clear OriginalFirstThunk
        clear FirstThunk
    */
    PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)m_PE->GetDosHeaderPointer();
    PIMAGE_IMPORT_DESCRIPTOR pImport = (PIMAGE_IMPORT_DESCRIPTOR)m_PE->GetImportDirectoryPointer();

    // 遍历导入表
    IMAGE_IMPORT_DESCRIPTOR ZeroImport;
    MyZeroMem(&ZeroImport, sizeof(ZeroImport));

    while (MyMemCmp(pImport, &ZeroImport, sizeof(IMAGE_IMPORT_DESCRIPTOR)) != 0) {

        // 判断是否为有效导入表项
        PIMAGE_THUNK_DATA32 pIat = (PIMAGE_THUNK_DATA32)((char*)pDosHeader + CPe::Rva2Fa(pImport->FirstThunk, pDosHeader));
        if (pIat->u1.AddressOfData == NULL) {
            pImport++;
            continue;
        }

        char* pDllName = (char*)pDosHeader + CPe::Rva2Fa(pImport->Name, pDosHeader);
        MyZeroMem(pDllName, MyStrLen(pDllName));

        // 判断是使用INT还是IAT
        DWORD dwThunkDataRva = pImport->OriginalFirstThunk;
        if (pImport->OriginalFirstThunk == NULL) {
            dwThunkDataRva = pImport->FirstThunk;
        }
        PIMAGE_THUNK_DATA32 pThunkData = (PIMAGE_THUNK_DATA32)((char*)pDosHeader + CPe::Rva2Fa(dwThunkDataRva, pDosHeader));

        // 遍历INT/IAT
        while (pThunkData->u1.AddressOfData != NULL) {
            DWORD dwFunIndex = NULL;
            if (pThunkData->u1.AddressOfData > 0x80000000) {
                // 序号
                dwFunIndex = pThunkData->u1.Ordinal & 0xffff;
                MyZeroMem(pThunkData, sizeof(DWORD));
            }
            else {
                // 名称
                dwFunIndex = (DWORD)pDosHeader + CPe::Rva2Fa(pThunkData->u1.AddressOfData, pDosHeader) + 2;
                MyZeroMem((char*)dwFunIndex, MyStrLen((char*)dwFunIndex));
                MyZeroMem(pThunkData, sizeof(DWORD));
            }
            pThunkData++;
        }

        pThunkData = (PIMAGE_THUNK_DATA32)((char*)pDosHeader + CPe::Rva2Fa(pImport->FirstThunk, pDosHeader));
        while (pThunkData->u1.AddressOfData != NULL) {
            MyZeroMem(pThunkData, sizeof(DWORD));
            pThunkData++;
        }

        MyZeroMem(pImport, sizeof(IMAGE_IMPORT_DESCRIPTOR));
        pImport++;
    }
}


DWORD CPacker::MoveRelocTable(PBYTE pRelocTableBuff) {
    /*
    {
        BYTE   Type          // 修复类型
        DWORD  FirstTypeRva  // 该页上第一个需要修复的数据RVA
        WORD   Item          // 与FirstTypeRva 的差值
        DWORD  0             // 4字节0表示结尾
    }
    */
    PIMAGE_DOS_HEADER pDosHeader = (PIMAGE_DOS_HEADER)m_PE->GetDosHeaderPointer();
    PIMAGE_BASE_RELOCATION pReloc = (PIMAGE_BASE_RELOCATION)m_PE->GetRelocDirectoryPointer();
    DWORD dwRelocSize = m_PE->GetRelocDirectorySize();
    if (pReloc == NULL) {
        return 0;
    }

    // 遍历重定位表
    PBYTE pData = pRelocTableBuff;
    DWORD dwReserve = 0;
    while (dwReserve != dwRelocSize) {
        DWORD dwPageRva = pReloc->VirtualAddress;
        DWORD dwSizeOfBlock = pReloc->SizeOfBlock;

        *(BYTE*)pData = 3;
        pData += sizeof(BYTE);

        WORD* pItem = (WORD*)((char*)pReloc + 8);
        DWORD dwItemCount = (pReloc->SizeOfBlock - 8) / 2;
        for (int i = 0; i < dwItemCount; ++i) {
            if (pItem[i] > 0x3000) {
                if (i == 0) {
                    *(WORD*)pData = (pItem[0] & 0xfff) + dwPageRva;
                }
                else {
                    *(WORD*)pData = (pItem[i] & 0xfff) - (pItem[0] & 0xfff) + dwPageRva;
                }
                pData += sizeof(WORD);
            }
        }

        *(DWORD*)pData = 0;
        pData += sizeof(DWORD);

        dwReserve += dwSizeOfBlock;
    }
    return (DWORD)pData - (DWORD)pRelocTableBuff;
}


void CPacker::ClearRelocTable() {

}


BOOL CPacker::DoCompress() {
    COMPRESSOR_HANDLE hCompressor = NULL;

    // 获取压缩的算法的句柄
    BOOL bSuccess = CreateCompressor(
        COMPRESS_ALGORITHM_XPRESS_HUFF, //  Compression Algorithm
        NULL,                           //  Optional allocation routine
        &hCompressor);                  //  Handle
    if (!bSuccess) {
        return FALSE;
    }

    // 申请存放压缩后数据的缓冲区
    DWORD dwFileSize = m_PE->GetFileSize();
    PBYTE pComPressDataBuf = new BYTE[dwFileSize];
    if (pComPressDataBuf == NULL) {
        return FALSE;
    }

    // 压缩数据
    DWORD dwComDataSize = 0;
    bSuccess = Compress(
        hCompressor,
        m_PE->GetDosHeaderPointer(), // 需要压缩的数据的缓冲区
        dwFileSize,         // 需要压缩的数据的大小
        pComPressDataBuf,   // 压缩后的数据的缓冲区
        dwFileSize,         // 压缩后的数据的缓冲区大小
        &dwComDataSize);    // 压缩后的数据的大小
    if (!bSuccess) {
        delete[] pComPressDataBuf;
        CloseCompressor(hCompressor);
        return FALSE;
    }

    // 构造压缩数据节
    m_dwComDataSize = dwComDataSize;
    m_dwComDataAlignSize = CPe::GetAlignSize(m_dwComDataSize, m_PE->GetFileAlignment());
    m_pCompressDataBuff = new BYTE[m_dwComDataAlignSize];
    if (m_pCompressDataBuff == NULL) {
        delete[] pComPressDataBuf;
        CloseCompressor(hCompressor);
        return FALSE;
    }

    ::RtlZeroMemory(m_pCompressDataBuff, m_dwComDataAlignSize);
    MyMemCopy(m_pCompressDataBuff, pComPressDataBuf, m_dwComDataSize);

    // 清理资源
    delete[] pComPressDataBuf;
    CloseCompressor(hCompressor);
    return TRUE;
}


unsigned char shellCode[4096] = {
    0x55, 0x8B, 0xEC, 0x81, 0xEC, 0xCC, 0x00, 0x00, 0x00, 0xC6, 0x45, 0xF0, 0x75, 0xC6, 0x45, 0xF1,
    0x73, 0xC6, 0x45, 0xF2, 0x65, 0xC6, 0x45, 0xF3, 0x72, 0xC6, 0x45, 0xF4, 0x33, 0xC6, 0x45, 0xF5,
    0x32, 0xC6, 0x45, 0xF6, 0x2E, 0xC6, 0x45, 0xF7, 0x64, 0xC6, 0x45, 0xF8, 0x6C, 0xC6, 0x45, 0xF9,
    0x6C, 0xC6, 0x45, 0xFA, 0x00, 0xC6, 0x45, 0xC8, 0x6B, 0xC6, 0x45, 0xC9, 0x65, 0xC6, 0x45, 0xCA,
    0x72, 0xC6, 0x45, 0xCB, 0x6E, 0xC6, 0x45, 0xCC, 0x65, 0xC6, 0x45, 0xCD, 0x6C, 0xC6, 0x45, 0xCE,
    0x33, 0xC6, 0x45, 0xCF, 0x32, 0xC6, 0x45, 0xD0, 0x2E, 0xC6, 0x45, 0xD1, 0x64, 0xC6, 0x45, 0xD2,
    0x6C, 0xC6, 0x45, 0xD3, 0x6C, 0xC6, 0x45, 0xD4, 0x00, 0xC6, 0x45, 0xD8, 0x43, 0xC6, 0x45, 0xD9,
    0x61, 0xC6, 0x45, 0xDA, 0x62, 0xC6, 0x45, 0xDB, 0x69, 0xC6, 0x45, 0xDC, 0x6E, 0xC6, 0x45, 0xDD,
    0x65, 0xC6, 0x45, 0xDE, 0x74, 0xC6, 0x45, 0xDF, 0x2E, 0xC6, 0x45, 0xE0, 0x64, 0xC6, 0x45, 0xE1,
    0x6C, 0xC6, 0x45, 0xE2, 0x6C, 0xC6, 0x45, 0xE3, 0x00, 0xC6, 0x45, 0xB8, 0x4C, 0xC6, 0x45, 0xB9,
    0x6F, 0xC6, 0x45, 0xBA, 0x61, 0xC6, 0x45, 0xBB, 0x64, 0xC6, 0x45, 0xBC, 0x4C, 0xC6, 0x45, 0xBD,
    0x69, 0xC6, 0x45, 0xBE, 0x62, 0xC6, 0x45, 0xBF, 0x72, 0xC6, 0x45, 0xC0, 0x61, 0xC6, 0x45, 0xC1,
    0x72, 0xC6, 0x45, 0xC2, 0x79, 0xC6, 0x45, 0xC3, 0x41, 0xC6, 0x45, 0xC4, 0x00, 0xC6, 0x45, 0xA8,
    0x56, 0xC6, 0x45, 0xA9, 0x69, 0xC6, 0x45, 0xAA, 0x72, 0xC6, 0x45, 0xAB, 0x74, 0xC6, 0x45, 0xAC,
    0x75, 0xC6, 0x45, 0xAD, 0x61, 0xC6, 0x45, 0xAE, 0x6C, 0xC6, 0x45, 0xAF, 0x41, 0xC6, 0x45, 0xB0,
    0x6C, 0xC6, 0x45, 0xB1, 0x6C, 0xC6, 0x45, 0xB2, 0x6F, 0xC6, 0x45, 0xB3, 0x63, 0xC6, 0x45, 0xB4,
    0x00, 0xC6, 0x45, 0x94, 0x43, 0xC6, 0x45, 0x95, 0x72, 0xC6, 0x45, 0x96, 0x65, 0xC6, 0x45, 0x97,
    0x61, 0xC6, 0x45, 0x98, 0x74, 0xC6, 0x45, 0x99, 0x65, 0xC6, 0x45, 0x9A, 0x44, 0xC6, 0x45, 0x9B,
    0x65, 0xC6, 0x45, 0x9C, 0x63, 0xC6, 0x45, 0x9D, 0x6F, 0xC6, 0x45, 0x9E, 0x6D, 0xC6, 0x45, 0x9F,
    0x70, 0xC6, 0x45, 0xA0, 0x72, 0xC6, 0x45, 0xA1, 0x65, 0xC6, 0x45, 0xA2, 0x73, 0xC6, 0x45, 0xA3,
    0x73, 0xC6, 0x45, 0xA4, 0x6F, 0xC6, 0x45, 0xA5, 0x72, 0xC6, 0x45, 0xA6, 0x00, 0xC6, 0x45, 0xE4,
    0x44, 0xC6, 0x45, 0xE5, 0x65, 0xC6, 0x45, 0xE6, 0x63, 0xC6, 0x45, 0xE7, 0x6F, 0xC6, 0x45, 0xE8,
    0x6D, 0xC6, 0x45, 0xE9, 0x70, 0xC6, 0x45, 0xEA, 0x72, 0xC6, 0x45, 0xEB, 0x65, 0xC6, 0x45, 0xEC,
    0x73, 0xC6, 0x45, 0xED, 0x73, 0xC6, 0x45, 0xEE, 0x00, 0x8D, 0x45, 0xC8, 0x50, 0xE8, 0x7E, 0x09,
    0x00, 0x00, 0x83, 0xC4, 0x04, 0x89, 0x45, 0x84, 0x8D, 0x4D, 0xF0, 0x51, 0xE8, 0x6F, 0x09, 0x00,
    0x00, 0x83, 0xC4, 0x04, 0x89, 0x85, 0x3C, 0xFF, 0xFF, 0xFF, 0x8D, 0x55, 0xD8, 0x52, 0xE8, 0x5D,
    0x09, 0x00, 0x00, 0x83, 0xC4, 0x04, 0x89, 0x45, 0x80, 0x8D, 0x45, 0xB8, 0x50, 0x8B, 0x4D, 0x84,
    0x51, 0xE8, 0xEA, 0x0A, 0x00, 0x00, 0x83, 0xC4, 0x08, 0x89, 0x85, 0x38, 0xFF, 0xFF, 0xFF, 0x8D,
    0x55, 0xA8, 0x52, 0x8B, 0x45, 0x84, 0x50, 0xE8, 0xD4, 0x0A, 0x00, 0x00, 0x83, 0xC4, 0x08, 0x89,
    0x85, 0x60, 0xFF, 0xFF, 0xFF, 0x8D, 0x4D, 0x94, 0x51, 0x8B, 0x55, 0x80, 0x52, 0xE8, 0xBE, 0x0A,
    0x00, 0x00, 0x83, 0xC4, 0x08, 0x89, 0x85, 0x5C, 0xFF, 0xFF, 0xFF, 0x8D, 0x45, 0xE4, 0x50, 0x8B,
    0x4D, 0x80, 0x51, 0xE8, 0xA8, 0x0A, 0x00, 0x00, 0x83, 0xC4, 0x08, 0x89, 0x85, 0x48, 0xFF, 0xFF,
    0xFF, 0x6A, 0x00, 0xE8, 0xF8, 0x08, 0x00, 0x00, 0x83, 0xC4, 0x04, 0x89, 0x85, 0x6C, 0xFF, 0xFF,
    0xFF, 0x8B, 0x95, 0x6C, 0xFF, 0xFF, 0xFF, 0x89, 0x55, 0xFC, 0x8B, 0x45, 0xFC, 0x8B, 0x4D, 0xFC,
    0x03, 0x48, 0x3C, 0x89, 0x8D, 0x7C, 0xFF, 0xFF, 0xFF, 0x8B, 0x95, 0x7C, 0xFF, 0xFF, 0xFF, 0x83,
    0xC2, 0x04, 0x89, 0x95, 0x68, 0xFF, 0xFF, 0xFF, 0x8B, 0x85, 0x7C, 0xFF, 0xFF, 0xFF, 0x83, 0xC0,
    0x18, 0x89, 0x85, 0x64, 0xFF, 0xFF, 0xFF, 0x8B, 0x8D, 0x68, 0xFF, 0xFF, 0xFF, 0x0F, 0xB7, 0x51,
    0x10, 0x03, 0x95, 0x64, 0xFF, 0xFF, 0xFF, 0x89, 0x55, 0x90, 0xB8, 0x28, 0x00, 0x00, 0x00, 0xD1,
    0xE0, 0x8B, 0x4D, 0x90, 0x8B, 0x54, 0x01, 0x1C, 0x89, 0x95, 0x54, 0xFF, 0xFF, 0xFF, 0xB8, 0x28,
    0x00, 0x00, 0x00, 0xD1, 0xE0, 0x8B, 0x4D, 0x90, 0x8B, 0x55, 0xFC, 0x03, 0x54, 0x01, 0x0C, 0x89,
    0x95, 0x50, 0xFF, 0xFF, 0xFF, 0xB8, 0x28, 0x00, 0x00, 0x00, 0xD1, 0xE0, 0x8B, 0x4D, 0x90, 0x8B,
    0x54, 0x01, 0x18, 0x89, 0x95, 0x78, 0xFF, 0xFF, 0xFF, 0x6A, 0x04, 0x68, 0x00, 0x10, 0x00, 0x00,
    0x8B, 0x85, 0x78, 0xFF, 0xFF, 0xFF, 0x50, 0x6A, 0x00, 0xFF, 0x95, 0x60, 0xFF, 0xFF, 0xFF, 0x89,
    0x45, 0x88, 0x8D, 0x8D, 0x4C, 0xFF, 0xFF, 0xFF, 0x51, 0x6A, 0x00, 0x6A, 0x04, 0xFF, 0x95, 0x5C,
    0xFF, 0xFF, 0xFF, 0x89, 0x45, 0x8C, 0x83, 0x7D, 0x8C, 0x00, 0x75, 0x05, 0xE9, 0xC1, 0x00, 0x00,
    0x00, 0xC7, 0x85, 0x58, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x95, 0x58, 0xFF, 0xFF,
    0xFF, 0x52, 0x8B, 0x85, 0x78, 0xFF, 0xFF, 0xFF, 0x50, 0x8B, 0x4D, 0x88, 0x51, 0x8B, 0x95, 0x54,
    0xFF, 0xFF, 0xFF, 0x52, 0x8B, 0x85, 0x50, 0xFF, 0xFF, 0xFF, 0x50, 0x8B, 0x8D, 0x4C, 0xFF, 0xFF,
    0xFF, 0x51, 0xFF, 0x95, 0x48, 0xFF, 0xFF, 0xFF, 0x89, 0x45, 0x8C, 0x83, 0x7D, 0x8C, 0x00, 0x75,
    0x02, 0xEB, 0x7F, 0x8B, 0x55, 0x88, 0x52, 0x8B, 0x45, 0xFC, 0x50, 0xE8, 0x50, 0x05, 0x00, 0x00,
    0x83, 0xC4, 0x08, 0x8B, 0x4D, 0xFC, 0x51, 0xE8, 0x24, 0x03, 0x00, 0x00, 0x83, 0xC4, 0x04, 0x8B,
    0x55, 0xFC, 0x52, 0xE8, 0x68, 0x00, 0x00, 0x00, 0x83, 0xC4, 0x04, 0x8B, 0x45, 0x88, 0x89, 0x85,
    0x74, 0xFF, 0xFF, 0xFF, 0x8B, 0x8D, 0x74, 0xFF, 0xFF, 0xFF, 0x8B, 0x95, 0x74, 0xFF, 0xFF, 0xFF,
    0x03, 0x51, 0x3C, 0x89, 0x95, 0x70, 0xFF, 0xFF, 0xFF, 0x8B, 0x85, 0x70, 0xFF, 0xFF, 0xFF, 0x83,
    0xC0, 0x04, 0x89, 0x85, 0x34, 0xFF, 0xFF, 0xFF, 0x8B, 0x8D, 0x70, 0xFF, 0xFF, 0xFF, 0x83, 0xC1,
    0x18, 0x89, 0x8D, 0x44, 0xFF, 0xFF, 0xFF, 0x8B, 0x95, 0x44, 0xFF, 0xFF, 0xFF, 0x8B, 0x85, 0x6C,
    0xFF, 0xFF, 0xFF, 0x03, 0x42, 0x10, 0x89, 0x85, 0x40, 0xFF, 0xFF, 0xFF, 0xFF, 0xA5, 0x40, 0xFF,
    0xFF, 0xFF, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
    0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x3C, 0x8B, 0x45, 0x08, 0x89, 0x45, 0xF8, 0x8B, 0x4D, 0xF8, 0x8B,
    0x55, 0xF8, 0x03, 0x51, 0x3C, 0x89, 0x55, 0xE8, 0x8B, 0x45, 0xE8, 0x83, 0xC0, 0x04, 0x89, 0x45,
    0xDC, 0x8B, 0x4D, 0xE8, 0x83, 0xC1, 0x18, 0x89, 0x4D, 0xFC, 0x8B, 0x55, 0xDC, 0x0F, 0xB7, 0x42,
    0x10, 0x03, 0x45, 0xFC, 0x89, 0x45, 0xC4, 0xB9, 0x08, 0x00, 0x00, 0x00, 0x6B, 0xD1, 0x05, 0x8B,
    0x45, 0xFC, 0x83, 0x7C, 0x10, 0x60, 0x00, 0x75, 0x05, 0xE9, 0xD2, 0x00, 0x00, 0x00, 0xB9, 0x08,
    0x00, 0x00, 0x00, 0x6B, 0xD1, 0x05, 0x8B, 0x45, 0xFC, 0x8B, 0x4D, 0xF8, 0x03, 0x4C, 0x10, 0x60,
    0x89, 0x4D, 0xF0, 0xBA, 0x08, 0x00, 0x00, 0x00, 0x6B, 0xC2, 0x05, 0x8B, 0x4D, 0xFC, 0x8B, 0x54,
    0x01, 0x64, 0x89, 0x55, 0xD8, 0x8B, 0x45, 0xFC, 0x8B, 0x4D, 0xF8, 0x2B, 0x48, 0x1C, 0x89, 0x4D,
    0xCC, 0xC7, 0x45, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x55, 0xEC, 0x3B, 0x55, 0xD8, 0x0F, 0x84,
    0x8C, 0x00, 0x00, 0x00, 0x8B, 0x45, 0xF0, 0x8B, 0x08, 0x89, 0x4D, 0xD0, 0x8B, 0x55, 0xF0, 0x8B,
    0x42, 0x04, 0x89, 0x45, 0xC8, 0x8B, 0x4D, 0xF0, 0x83, 0xC1, 0x08, 0x89, 0x4D, 0xE4, 0x8B, 0x55,
    0xF0, 0x8B, 0x42, 0x04, 0x83, 0xE8, 0x08, 0xD1, 0xE8, 0x89, 0x45, 0xD4, 0xC7, 0x45, 0xF4, 0x00,
    0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x4D, 0xF4, 0x83, 0xC1, 0x01, 0x89, 0x4D, 0xF4, 0x8B, 0x55,
    0xF4, 0x3B, 0x55, 0xD4, 0x73, 0x3C, 0x8B, 0x45, 0xF4, 0x8B, 0x4D, 0xE4, 0x0F, 0xB7, 0x14, 0x41,
    0x81, 0xFA, 0x00, 0x30, 0x00, 0x00, 0x7E, 0x28, 0x8B, 0x45, 0xF8, 0x03, 0x45, 0xD0, 0x8B, 0x4D,
    0xF4, 0x8B, 0x55, 0xE4, 0x0F, 0xB7, 0x0C, 0x4A, 0x81, 0xE1, 0xFF, 0x0F, 0x00, 0x00, 0x03, 0xC1,
    0x89, 0x45, 0xE0, 0x8B, 0x55, 0xE0, 0x8B, 0x02, 0x03, 0x45, 0xCC, 0x8B, 0x4D, 0xE0, 0x89, 0x01,
    0xEB, 0xB3, 0x8B, 0x55, 0xEC, 0x03, 0x55, 0xC8, 0x89, 0x55, 0xEC, 0xE9, 0x68, 0xFF, 0xFF, 0xFF,
    0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
    0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x4C, 0xC6, 0x45, 0xE4, 0x6B, 0xC6, 0x45, 0xE5, 0x65, 0xC6, 0x45,
    0xE6, 0x72, 0xC6, 0x45, 0xE7, 0x6E, 0xC6, 0x45, 0xE8, 0x65, 0xC6, 0x45, 0xE9, 0x6C, 0xC6, 0x45,
    0xEA, 0x33, 0xC6, 0x45, 0xEB, 0x32, 0xC6, 0x45, 0xEC, 0x2E, 0xC6, 0x45, 0xED, 0x64, 0xC6, 0x45,
    0xEE, 0x6C, 0xC6, 0x45, 0xEF, 0x6C, 0xC6, 0x45, 0xF0, 0x00, 0xC6, 0x45, 0xD4, 0x56, 0xC6, 0x45,
    0xD5, 0x69, 0xC6, 0x45, 0xD6, 0x72, 0xC6, 0x45, 0xD7, 0x74, 0xC6, 0x45, 0xD8, 0x75, 0xC6, 0x45,
    0xD9, 0x61, 0xC6, 0x45, 0xDA, 0x6C, 0xC6, 0x45, 0xDB, 0x41, 0xC6, 0x45, 0xDC, 0x6C, 0xC6, 0x45,
    0xDD, 0x6C, 0xC6, 0x45, 0xDE, 0x6F, 0xC6, 0x45, 0xDF, 0x63, 0xC6, 0x45, 0xE0, 0x00, 0x8D, 0x45,
    0xE4, 0x50, 0xE8, 0xB9, 0x05, 0x00, 0x00, 0x83, 0xC4, 0x04, 0x89, 0x45, 0xF8, 0x8D, 0x4D, 0xD4,
    0x51, 0x8B, 0x55, 0xF8, 0x52, 0xE8, 0x46, 0x07, 0x00, 0x00, 0x83, 0xC4, 0x08, 0x89, 0x45, 0xF4,
    0x6A, 0x40, 0x68, 0x00, 0x10, 0x00, 0x00, 0x6A, 0x20, 0x6A, 0x00, 0xFF, 0x55, 0xF4, 0x89, 0x45,
    0xFC, 0xC6, 0x45, 0xB4, 0xE8, 0xC6, 0x45, 0xB5, 0x01, 0xC6, 0x45, 0xB6, 0x00, 0xC6, 0x45, 0xB7,
    0x00, 0xC6, 0x45, 0xB8, 0x00, 0xC6, 0x45, 0xB9, 0xE9, 0xC6, 0x45, 0xBA, 0x58, 0xC6, 0x45, 0xBB,
    0xEB, 0xC6, 0x45, 0xBC, 0x01, 0xC6, 0x45, 0xBD, 0xE8, 0xC6, 0x45, 0xBE, 0xB8, 0xC6, 0x45, 0xBF,
    0x8D, 0xC6, 0x45, 0xC0, 0xE4, 0xC6, 0x45, 0xC1, 0xD8, 0xC6, 0x45, 0xC2, 0x62, 0xC6, 0x45, 0xC3,
    0xEB, 0xC6, 0x45, 0xC4, 0x01, 0xC6, 0x45, 0xC5, 0x15, 0xC6, 0x45, 0xC6, 0x35, 0xC6, 0x45, 0xC7,
    0x75, 0xC6, 0x45, 0xC8, 0x35, 0xC6, 0x45, 0xC9, 0x97, 0xC6, 0x45, 0xCA, 0x13, 0xC6, 0x45, 0xCB,
    0xEB, 0xC6, 0x45, 0xCC, 0x01, 0xC6, 0x45, 0xCD, 0xFF, 0xC6, 0x45, 0xCE, 0x50, 0xC6, 0x45, 0xCF,
    0xEB, 0xC6, 0x45, 0xD0, 0x02, 0xC6, 0x45, 0xD1, 0xFF, 0xC6, 0x45, 0xD2, 0x15, 0xC6, 0x45, 0xD3,
    0xC3, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x6B, 0xC8, 0x0B, 0x8A, 0x55, 0x08, 0x88, 0x54, 0x0D, 0xB4,
    0x8B, 0x45, 0x08, 0xC1, 0xE8, 0x08, 0xB9, 0x01, 0x00, 0x00, 0x00, 0x6B, 0xD1, 0x0C, 0x88, 0x44,
    0x15, 0xB4, 0x8B, 0x45, 0x08, 0xC1, 0xE8, 0x10, 0xB9, 0x01, 0x00, 0x00, 0x00, 0x6B, 0xD1, 0x0D,
    0x88, 0x44, 0x15, 0xB4, 0x8B, 0x45, 0x08, 0xC1, 0xE8, 0x18, 0xB9, 0x01, 0x00, 0x00, 0x00, 0x6B,
    0xD1, 0x0E, 0x88, 0x44, 0x15, 0xB4, 0x6A, 0x20, 0x8D, 0x45, 0xB4, 0x50, 0x8B, 0x4D, 0xFC, 0x51,
    0xE8, 0xDB, 0x03, 0x00, 0x00, 0x83, 0xC4, 0x0C, 0x8B, 0x45, 0xFC, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC,
    0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x64, 0xC6, 0x45, 0xC0, 0x5F, 0xC6, 0x45, 0xC1, 0x61, 0xC6, 0x45,
    0xC2, 0x63, 0xC6, 0x45, 0xC3, 0x6D, 0xC6, 0x45, 0xC4, 0x64, 0xC6, 0x45, 0xC5, 0x6C, 0xC6, 0x45,
    0xC6, 0x6E, 0xC6, 0x45, 0xC7, 0x00, 0xC6, 0x45, 0xB0, 0x5F, 0xC6, 0x45, 0xB1, 0x61, 0xC6, 0x45,
    0xB2, 0x64, 0xC6, 0x45, 0xB3, 0x6A, 0xC6, 0x45, 0xB4, 0x75, 0xC6, 0x45, 0xB5, 0x73, 0xC6, 0x45,
    0xB6, 0x74, 0xC6, 0x45, 0xB7, 0x5F, 0xC6, 0x45, 0xB8, 0x66, 0xC6, 0x45, 0xB9, 0x64, 0xC6, 0x45,
    0xBA, 0x69, 0xC6, 0x45, 0xBB, 0x76, 0xC6, 0x45, 0xBC, 0x00, 0x8B, 0x45, 0x08, 0x89, 0x45, 0xF8,
    0x8B, 0x4D, 0xF8, 0x8B, 0x55, 0xF8, 0x03, 0x51, 0x3C, 0x89, 0x55, 0xE0, 0x8B, 0x45, 0xE0, 0x83,
    0xC0, 0x04, 0x89, 0x45, 0xD4, 0x8B, 0x4D, 0xE0, 0x83, 0xC1, 0x18, 0x89, 0x4D, 0xDC, 0x8B, 0x55,
    0xD4, 0x0F, 0xB7, 0x42, 0x10, 0x03, 0x45, 0xDC, 0x89, 0x45, 0xC8, 0xB9, 0x08, 0x00, 0x00, 0x00,
    0xC1, 0xE1, 0x00, 0x8B, 0x55, 0xDC, 0x8B, 0x44, 0x0A, 0x60, 0x89, 0x45, 0xD8, 0x83, 0x7D, 0xD8,
    0x00, 0x75, 0x05, 0xE9, 0x73, 0x01, 0x00, 0x00, 0x8B, 0x4D, 0xF8, 0x03, 0x4D, 0xD8, 0x89, 0x4D,
    0xFC, 0x6A, 0x14, 0x8D, 0x55, 0x9C, 0x52, 0xE8, 0xB4, 0x02, 0x00, 0x00, 0x83, 0xC4, 0x08, 0x6A,
    0x14, 0x8D, 0x45, 0x9C, 0x50, 0x8B, 0x4D, 0xFC, 0x51, 0xE8, 0xC2, 0x02, 0x00, 0x00, 0x83, 0xC4,
    0x0C, 0x85, 0xC0, 0x0F, 0x84, 0x42, 0x01, 0x00, 0x00, 0x8B, 0x55, 0xFC, 0x8B, 0x45, 0xF8, 0x03,
    0x42, 0x10, 0x89, 0x45, 0xF0, 0x8B, 0x4D, 0xF0, 0x83, 0x39, 0x00, 0x75, 0x0B, 0x8B, 0x55, 0xFC,
    0x83, 0xC2, 0x14, 0x89, 0x55, 0xFC, 0xEB, 0xC7, 0x8B, 0x45, 0xFC, 0x8B, 0x08, 0x89, 0x4D, 0xE4,
    0x83, 0x7D, 0xE4, 0x00, 0x75, 0x09, 0x8B, 0x55, 0xFC, 0x8B, 0x42, 0x10, 0x89, 0x45, 0xE4, 0x8B,
    0x4D, 0xF8, 0x03, 0x4D, 0xE4, 0x89, 0x4D, 0xF4, 0x8B, 0x55, 0xFC, 0x8B, 0x45, 0xF8, 0x03, 0x42,
    0x0C, 0x89, 0x45, 0xD0, 0x8B, 0x4D, 0xD0, 0x51, 0xE8, 0x83, 0x03, 0x00, 0x00, 0x83, 0xC4, 0x04,
    0x89, 0x45, 0xCC, 0x8B, 0x55, 0xF4, 0x83, 0x3A, 0x00, 0x0F, 0x84, 0xCE, 0x00, 0x00, 0x00, 0xC7,
    0x45, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x45, 0xF4, 0x81, 0x38, 0x00, 0x00, 0x00, 0x80, 0x76,
    0x10, 0x8B, 0x4D, 0xF4, 0x8B, 0x11, 0x81, 0xE2, 0xFF, 0xFF, 0x00, 0x00, 0x89, 0x55, 0xEC, 0xEB,
    0x0F, 0x8B, 0x45, 0xF4, 0x8B, 0x08, 0x8B, 0x55, 0xF8, 0x8D, 0x44, 0x0A, 0x02, 0x89, 0x45, 0xEC,
    0x8B, 0x4D, 0xEC, 0x51, 0x8B, 0x55, 0xCC, 0x52, 0xE8, 0xD3, 0x04, 0x00, 0x00, 0x83, 0xC4, 0x08,
    0x89, 0x45, 0xE8, 0x8D, 0x45, 0xC0, 0x50, 0xE8, 0x74, 0x02, 0x00, 0x00, 0x83, 0xC4, 0x04, 0x50,
    0x8D, 0x4D, 0xC0, 0x51, 0x8B, 0x55, 0xEC, 0x52, 0xE8, 0xF3, 0x01, 0x00, 0x00, 0x83, 0xC4, 0x0C,
    0x85, 0xC0, 0x75, 0x0A, 0x8B, 0x45, 0xF0, 0x8B, 0x4D, 0xE8, 0x89, 0x08, 0xEB, 0x48, 0x8D, 0x55,
    0xB0, 0x52, 0xE8, 0x49, 0x02, 0x00, 0x00, 0x83, 0xC4, 0x04, 0x50, 0x8D, 0x45, 0xB0, 0x50, 0x8B,
    0x4D, 0xEC, 0x51, 0xE8, 0xC8, 0x01, 0x00, 0x00, 0x83, 0xC4, 0x0C, 0x85, 0xC0, 0x75, 0x0A, 0x8B,
    0x55, 0xF0, 0x8B, 0x45, 0xE8, 0x89, 0x02, 0xEB, 0x1D, 0x8B, 0x4D, 0xE8, 0x81, 0xF1, 0x75, 0x35,
    0x97, 0x13, 0x89, 0x4D, 0xE8, 0x8B, 0x55, 0xE8, 0x52, 0xE8, 0x92, 0xFC, 0xFF, 0xFF, 0x83, 0xC4,
    0x04, 0x8B, 0x4D, 0xF0, 0x89, 0x01, 0x8B, 0x55, 0xF4, 0x83, 0xC2, 0x04, 0x89, 0x55, 0xF4, 0x8B,
    0x45, 0xF0, 0x83, 0xC0, 0x04, 0x89, 0x45, 0xF0, 0xE9, 0x26, 0xFF, 0xFF, 0xFF, 0x8B, 0x4D, 0xFC,
    0x83, 0xC1, 0x14, 0x89, 0x4D, 0xFC, 0xE9, 0xA4, 0xFE, 0xFF, 0xFF, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC,
    0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x44, 0xC6, 0x45, 0xCC, 0x6B, 0xC6, 0x45, 0xCD, 0x65, 0xC6, 0x45,
    0xCE, 0x72, 0xC6, 0x45, 0xCF, 0x6E, 0xC6, 0x45, 0xD0, 0x65, 0xC6, 0x45, 0xD1, 0x6C, 0xC6, 0x45,
    0xD2, 0x33, 0xC6, 0x45, 0xD3, 0x32, 0xC6, 0x45, 0xD4, 0x2E, 0xC6, 0x45, 0xD5, 0x64, 0xC6, 0x45,
    0xD6, 0x6C, 0xC6, 0x45, 0xD7, 0x6C, 0xC6, 0x45, 0xD8, 0x00, 0xC6, 0x45, 0xBC, 0x56, 0xC6, 0x45,
    0xBD, 0x69, 0xC6, 0x45, 0xBE, 0x72, 0xC6, 0x45, 0xBF, 0x74, 0xC6, 0x45, 0xC0, 0x75, 0xC6, 0x45,
    0xC1, 0x61, 0xC6, 0x45, 0xC2, 0x6C, 0xC6, 0x45, 0xC3, 0x50, 0xC6, 0x45, 0xC4, 0x72, 0xC6, 0x45,
    0xC5, 0x6F, 0xC6, 0x45, 0xC6, 0x74, 0xC6, 0x45, 0xC7, 0x65, 0xC6, 0x45, 0xC8, 0x63, 0xC6, 0x45,
    0xC9, 0x74, 0xC6, 0x45, 0xCA, 0x00, 0x8D, 0x45, 0xCC, 0x50, 0xE8, 0x11, 0x02, 0x00, 0x00, 0x83,
    0xC4, 0x04, 0x89, 0x45, 0xE4, 0x8D, 0x4D, 0xBC, 0x51, 0x8B, 0x55, 0xE4, 0x52, 0xE8, 0x9E, 0x03,
    0x00, 0x00, 0x83, 0xC4, 0x08, 0x89, 0x45, 0xE0, 0x8B, 0x45, 0x0C, 0x89, 0x45, 0xF0, 0x8B, 0x4D,
    0xF0, 0x8B, 0x55, 0xF0, 0x03, 0x51, 0x3C, 0x89, 0x55, 0xEC, 0x8B, 0x45, 0xEC, 0x83, 0xC0, 0x04,
    0x89, 0x45, 0xE8, 0x8B, 0x4D, 0xEC, 0x83, 0xC1, 0x18, 0x89, 0x4D, 0xF8, 0x8B, 0x55, 0xE8, 0x0F,
    0xB7, 0x42, 0x10, 0x03, 0x45, 0xF8, 0x89, 0x45, 0xFC, 0x8D, 0x4D, 0xDC, 0x51, 0x6A, 0x40, 0x8B,
    0x55, 0xF8, 0x8B, 0x42, 0x38, 0x50, 0x8B, 0x4D, 0x08, 0x51, 0xFF, 0x55, 0xE0, 0x8B, 0x55, 0xF8,
    0x8B, 0x42, 0x3C, 0x50, 0x8B, 0x4D, 0x0C, 0x51, 0x8B, 0x55, 0x08, 0x52, 0xE8, 0xBF, 0x00, 0x00,
    0x00, 0x83, 0xC4, 0x0C, 0xC7, 0x45, 0xF4, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x45, 0xF4,
    0x83, 0xC0, 0x01, 0x89, 0x45, 0xF4, 0x8B, 0x4D, 0xE8, 0x0F, 0xB7, 0x51, 0x02, 0x39, 0x55, 0xF4,
    0x7D, 0x37, 0x8B, 0x45, 0xFC, 0x83, 0x78, 0x10, 0x00, 0x74, 0x23, 0x8B, 0x4D, 0xFC, 0x8B, 0x51,
    0x10, 0x52, 0x8B, 0x45, 0xFC, 0x8B, 0x4D, 0x0C, 0x03, 0x48, 0x14, 0x51, 0x8B, 0x55, 0xFC, 0x8B,
    0x45, 0x08, 0x03, 0x42, 0x0C, 0x50, 0xE8, 0x75, 0x00, 0x00, 0x00, 0x83, 0xC4, 0x0C, 0x8B, 0x4D,
    0xFC, 0x83, 0xC1, 0x28, 0x89, 0x4D, 0xFC, 0xEB, 0xB4, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC,
    0x55, 0x8B, 0xEC, 0x57, 0xFC, 0x8B, 0x7D, 0x08, 0x8B, 0x4D, 0x0C, 0xB8, 0x00, 0x00, 0x00, 0x00,
    0xF3, 0xAA, 0x5F, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
    0x55, 0x8B, 0xEC, 0x51, 0x56, 0x57, 0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x8B, 0x7D,
    0x08, 0x8B, 0x75, 0x0C, 0x8B, 0x4D, 0x10, 0xF3, 0xA6, 0x75, 0x07, 0xB8, 0x00, 0x00, 0x00, 0x00,
    0xEB, 0x04, 0x2B, 0xFE, 0x8B, 0xC7, 0x89, 0x45, 0xFC, 0x8B, 0x45, 0xFC, 0x5F, 0x5E, 0x8B, 0xE5,
    0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
    0x55, 0x8B, 0xEC, 0x56, 0x57, 0xFC, 0x8B, 0x7D, 0x08, 0x8B, 0x75, 0x0C, 0x8B, 0x45, 0x10, 0x33,
    0xD2, 0xB9, 0x04, 0x00, 0x00, 0x00, 0xF7, 0xF1, 0x8B, 0xC8, 0xF3, 0xA5, 0x8B, 0xCA, 0xF3, 0xA4,
    0x5F, 0x5E, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
    0x55, 0x8B, 0xEC, 0x51, 0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x45, 0x08, 0x03, 0x45,
    0xFC, 0x0F, 0xBE, 0x08, 0x85, 0xC9, 0x74, 0x0B, 0x8B, 0x55, 0xFC, 0x83, 0xC2, 0x01, 0x89, 0x55,
    0xFC, 0xEB, 0xE8, 0x8B, 0x45, 0xFC, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
    0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x08, 0xC7, 0x45, 0xF8, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xFC,
    0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x45, 0xFC, 0x83, 0xC0, 0x01, 0x89, 0x45, 0xFC, 0x8B,
    0x4D, 0xFC, 0x3B, 0x4D, 0x10, 0x7D, 0x3E, 0x8B, 0x55, 0x0C, 0x03, 0x55, 0xFC, 0x0F, 0xBE, 0x02,
    0x8B, 0x4D, 0x08, 0x03, 0x4D, 0xF8, 0x0F, 0xBE, 0x11, 0x3B, 0xC2, 0x74, 0x1D, 0x8B, 0x45, 0x0C,
    0x03, 0x45, 0xFC, 0x0F, 0xBE, 0x08, 0x8B, 0x55, 0x08, 0x03, 0x55, 0xF8, 0x0F, 0xBE, 0x02, 0x83,
    0xC0, 0x20, 0x3B, 0xC8, 0x74, 0x04, 0x33, 0xC0, 0xEB, 0x21, 0x8B, 0x4D, 0xF8, 0x83, 0xC1, 0x02,
    0x89, 0x4D, 0xF8, 0xEB, 0xB1, 0x8B, 0x55, 0x08, 0x03, 0x55, 0xF8, 0x0F, 0xBE, 0x02, 0x85, 0xC0,
    0x74, 0x04, 0x33, 0xC0, 0xEB, 0x05, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x8B, 0xE5, 0x5D, 0xC3, 0xCC,
    0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x3C, 0x53, 0x56, 0x57, 0xC6, 0x45, 0xD4, 0x6B, 0xC6, 0x45, 0xD5,
    0x65, 0xC6, 0x45, 0xD6, 0x72, 0xC6, 0x45, 0xD7, 0x6E, 0xC6, 0x45, 0xD8, 0x65, 0xC6, 0x45, 0xD9,
    0x6C, 0xC6, 0x45, 0xDA, 0x33, 0xC6, 0x45, 0xDB, 0x32, 0xC6, 0x45, 0xDC, 0x2E, 0xC6, 0x45, 0xDD,
    0x64, 0xC6, 0x45, 0xDE, 0x6C, 0xC6, 0x45, 0xDF, 0x6C, 0xC6, 0x45, 0xE0, 0x00, 0xC6, 0x45, 0xC4,
    0x4C, 0xC6, 0x45, 0xC5, 0x6F, 0xC6, 0x45, 0xC6, 0x61, 0xC6, 0x45, 0xC7, 0x64, 0xC6, 0x45, 0xC8,
    0x4C, 0xC6, 0x45, 0xC9, 0x69, 0xC6, 0x45, 0xCA, 0x62, 0xC6, 0x45, 0xCB, 0x72, 0xC6, 0x45, 0xCC,
    0x61, 0xC6, 0x45, 0xCD, 0x72, 0xC6, 0x45, 0xCE, 0x79, 0xC6, 0x45, 0xCF, 0x41, 0xC6, 0x45, 0xD0,
    0x00, 0xC7, 0x45, 0xFC, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xF8, 0x00, 0x00, 0x00, 0x00, 0xC7,
    0x45, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xEC, 0x00, 0x00, 0x00, 0x00, 0x60, 0x64, 0xA1,
    0x18, 0x00, 0x00, 0x00, 0x8B, 0x40, 0x30, 0x8B, 0x40, 0x0C, 0x8B, 0x40, 0x0C, 0x89, 0x45, 0xFC,
    0x8B, 0x18, 0x89, 0x5D, 0xF8, 0x8B, 0x58, 0x04, 0x89, 0x5D, 0xF0, 0x61, 0x8B, 0x45, 0xFC, 0x89,
    0x45, 0xEC, 0x83, 0x7D, 0xFC, 0x00, 0x74, 0x0C, 0x83, 0x7D, 0xF8, 0x00, 0x74, 0x06, 0x83, 0x7D,
    0xF0, 0x00, 0x75, 0x07, 0x33, 0xC0, 0xE9, 0xC0, 0x00, 0x00, 0x00, 0x83, 0x7D, 0x08, 0x00, 0x75,
    0x0B, 0x8B, 0x4D, 0xFC, 0x8B, 0x41, 0x18, 0xE9, 0xAF, 0x00, 0x00, 0x00, 0xC7, 0x45, 0xF4, 0x00,
    0x00, 0x00, 0x00, 0x8B, 0x55, 0xF8, 0x3B, 0x55, 0xEC, 0x74, 0x77, 0x8B, 0x45, 0x08, 0x50, 0xE8,
    0x5C, 0xFE, 0xFF, 0xFF, 0x83, 0xC4, 0x04, 0x50, 0x8B, 0x4D, 0x08, 0x51, 0x8B, 0x55, 0xFC, 0x8B,
    0x42, 0x30, 0x50, 0xE8, 0x78, 0xFE, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0x85, 0xC0, 0x74, 0x08, 0x8B,
    0x4D, 0xFC, 0x8B, 0x41, 0x18, 0xEB, 0x74, 0x8B, 0x55, 0x08, 0x52, 0xE8, 0x30, 0xFE, 0xFF, 0xFF,
    0x83, 0xC4, 0x04, 0x50, 0x8B, 0x45, 0x08, 0x50, 0x8B, 0x4D, 0xFC, 0x8B, 0x51, 0x28, 0x52, 0xE8,
    0x4C, 0xFE, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0x85, 0xC0, 0x74, 0x08, 0x8B, 0x45, 0xFC, 0x8B, 0x40,
    0x18, 0xEB, 0x48, 0x8B, 0x4D, 0xF8, 0x89, 0x4D, 0xF4, 0x8B, 0x55, 0xF4, 0x89, 0x55, 0xFC, 0x8B,
    0x45, 0xF4, 0x8B, 0x08, 0x89, 0x4D, 0xF8, 0x8B, 0x55, 0xF4, 0x8B, 0x42, 0x04, 0x89, 0x45, 0xF0,
    0xEB, 0x81, 0x8D, 0x4D, 0xD4, 0x51, 0xE8, 0x95, 0xFE, 0xFF, 0xFF, 0x83, 0xC4, 0x04, 0x89, 0x45,
    0xE8, 0x8D, 0x55, 0xC4, 0x52, 0x8B, 0x45, 0xE8, 0x50, 0xE8, 0x22, 0x00, 0x00, 0x00, 0x83, 0xC4,
    0x08, 0x89, 0x45, 0xE4, 0x8B, 0x4D, 0x08, 0x51, 0xFF, 0x55, 0xE4, 0x5F, 0x5E, 0x5B, 0x8B, 0xE5,
    0x5D, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC,
    0x55, 0x8B, 0xEC, 0x81, 0xEC, 0x50, 0x01, 0x00, 0x00, 0x53, 0x56, 0x57, 0x83, 0x7D, 0x08, 0x00,
    0x74, 0x06, 0x83, 0x7D, 0x0C, 0x00, 0x75, 0x07, 0x33, 0xC0, 0xE9, 0xC2, 0x01, 0x00, 0x00, 0x8B,
    0x45, 0x08, 0x89, 0x45, 0xE8, 0x8B, 0x4D, 0xE8, 0x8B, 0x55, 0xE8, 0x03, 0x51, 0x3C, 0x89, 0x55,
    0xE4, 0x8B, 0x45, 0xE4, 0x83, 0xC0, 0x04, 0x89, 0x45, 0xDC, 0x8B, 0x4D, 0xE4, 0x83, 0xC1, 0x18,
    0x89, 0x4D, 0xEC, 0x8B, 0x55, 0xDC, 0x0F, 0xB7, 0x42, 0x10, 0x03, 0x45, 0xEC, 0x89, 0x45, 0xB0,
    0xB9, 0x08, 0x00, 0x00, 0x00, 0x6B, 0xD1, 0x00, 0x8B, 0x45, 0xEC, 0x8B, 0x4C, 0x10, 0x60, 0x89,
    0x4D, 0xD8, 0xBA, 0x08, 0x00, 0x00, 0x00, 0x6B, 0xC2, 0x00, 0x8B, 0x4D, 0xEC, 0x8B, 0x54, 0x01,
    0x64, 0x89, 0x55, 0xD4, 0x8B, 0x45, 0x08, 0x03, 0x45, 0xD8, 0x89, 0x45, 0xFC, 0x8B, 0x4D, 0xFC,
    0x03, 0x4D, 0xD4, 0x89, 0x4D, 0xB8, 0x8B, 0x55, 0xFC, 0x8B, 0x42, 0x1C, 0x89, 0x45, 0xD0, 0x8B,
    0x4D, 0xFC, 0x8B, 0x51, 0x20, 0x89, 0x55, 0xCC, 0x8B, 0x45, 0xFC, 0x8B, 0x48, 0x24, 0x89, 0x4D,
    0xC8, 0x8B, 0x55, 0x08, 0x03, 0x55, 0xD0, 0x89, 0x55, 0xBC, 0x8B, 0x45, 0x08, 0x03, 0x45, 0xCC,
    0x89, 0x45, 0xC4, 0x8B, 0x4D, 0x08, 0x03, 0x4D, 0xC8, 0x89, 0x4D, 0xC0, 0xC7, 0x45, 0xF0, 0xFF,
    0xFF, 0xFF, 0xFF, 0x8B, 0x55, 0x0C, 0x81, 0xE2, 0x00, 0x00, 0xFF, 0xFF, 0x76, 0x7C, 0xC7, 0x45,
    0xF4, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x09, 0x8B, 0x45, 0xF4, 0x83, 0xC0, 0x01, 0x89, 0x45, 0xF4,
    0x8B, 0x4D, 0xFC, 0x8B, 0x55, 0xF4, 0x3B, 0x51, 0x18, 0x73, 0x5D, 0x8B, 0x45, 0xF4, 0x8B, 0x4D,
    0xC4, 0x8B, 0x55, 0x08, 0x03, 0x14, 0x81, 0x89, 0x55, 0xE0, 0x8B, 0x45, 0x0C, 0x50, 0xE8, 0xAD,
    0xFC, 0xFF, 0xFF, 0x83, 0xC4, 0x04, 0x50, 0x8B, 0x4D, 0x0C, 0x51, 0x8B, 0x55, 0xE0, 0x52, 0xE8,
    0x2C, 0xFC, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0x85, 0xC0, 0x75, 0x2B, 0x8B, 0x45, 0x0C, 0x50, 0xE8,
    0x8C, 0xFC, 0xFF, 0xFF, 0x83, 0xC4, 0x04, 0x8B, 0xF0, 0x8B, 0x4D, 0xE0, 0x51, 0xE8, 0x7E, 0xFC,
    0xFF, 0xFF, 0x83, 0xC4, 0x04, 0x3B, 0xF0, 0x75, 0x0D, 0x8B, 0x55, 0xF4, 0x8B, 0x45, 0xC0, 0x0F,
    0xB7, 0x0C, 0x50, 0x89, 0x4D, 0xF0, 0xEB, 0x8F, 0xEB, 0x12, 0x8B, 0x55, 0x0C, 0x81, 0xE2, 0xFF,
    0xFF, 0x00, 0x00, 0x8B, 0x45, 0xFC, 0x2B, 0x50, 0x10, 0x89, 0x55, 0xF0, 0x83, 0x7D, 0xF0, 0xFF,
    0x75, 0x04, 0x33, 0xC0, 0xEB, 0x7B, 0x8B, 0x4D, 0xF0, 0x8B, 0x55, 0xBC, 0x8B, 0x45, 0x08, 0x03,
    0x04, 0x8A, 0x89, 0x45, 0xF8, 0x8B, 0x4D, 0xF8, 0x3B, 0x4D, 0xFC, 0x72, 0x61, 0x8B, 0x55, 0xF8,
    0x3B, 0x55, 0xB8, 0x73, 0x59, 0x68, 0xFF, 0x00, 0x00, 0x00, 0x8D, 0x85, 0xB0, 0xFE, 0xFF, 0xFF,
    0x50, 0xE8, 0x8A, 0xFB, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0x60, 0x8B, 0x75, 0xF8, 0x8D, 0xBD, 0xB0,
    0xFE, 0xFF, 0xFF, 0xB9, 0xFF, 0x00, 0x00, 0x00, 0x33, 0xD2, 0x3E, 0x8A, 0x16, 0x80, 0xFA, 0x2E,
    0x74, 0x03, 0xA4, 0xE2, 0xF5, 0x46, 0x89, 0x75, 0xF8, 0x61, 0x8D, 0x8D, 0xB0, 0xFE, 0xFF, 0xFF,
    0x51, 0xE8, 0x9A, 0xFC, 0xFF, 0xFF, 0x83, 0xC4, 0x04, 0x89, 0x45, 0xB4, 0x8B, 0x55, 0xF8, 0x52,
    0x8B, 0x45, 0xB4, 0x50, 0xE8, 0x27, 0xFE, 0xFF, 0xFF, 0x83, 0xC4, 0x08, 0xEB, 0x03, 0x8B, 0x45,
    0xF8, 0x5F, 0x5E, 0x5B, 0x8B, 0xE5, 0x5D, 0xC3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


BOOL CPacker::GetShellCode() {
    m_pShellCodeBuff = shellCode;
    m_dwShellCodeSize = CPe::GetAlignSize(sizeof(shellCode), m_PE->GetFileAlignment());
    return TRUE;
}


BOOL CPacker::RebuildSection() {
    ::RtlZeroMemory(&m_NewSecHdrs[0], sizeof(m_NewSecHdrs));

    // -没有文件映射的节
    MyMemCopy(m_NewSecHdrs[SHI_SPACE].Name, (LPVOID)".upx", MyStrLen(".upx"));
    m_NewSecHdrs[SHI_SPACE].VirtualAddress = CPe::GetAlignSize(m_PE->GetSizeOfHeaders(), m_PE->GetSectionAlignment());
    m_NewSecHdrs[SHI_SPACE].Misc.VirtualSize = m_PE->GetSizeOfImage() - m_NewSecHdrs[SHI_SPACE].VirtualAddress;
    m_NewSecHdrs[SHI_SPACE].PointerToRawData = m_PE->GetSizeOfHeaders();
    m_NewSecHdrs[SHI_SPACE].SizeOfRawData = 0;
    m_NewSecHdrs[SHI_SPACE].Characteristics = IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_READ | IMAGE_SCN_MEM_WRITE;

    // -壳代码节
    MyMemCopy(m_NewSecHdrs[SHI_CODE].Name, (LPVOID)".text", MyStrLen(".text"));
    m_NewSecHdrs[SHI_CODE].VirtualAddress = m_NewSecHdrs[SHI_SPACE].VirtualAddress + m_NewSecHdrs[SHI_SPACE].Misc.VirtualSize;
    m_NewSecHdrs[SHI_CODE].Misc.VirtualSize = CPe::GetAlignSize(m_dwShellCodeSize, m_PE->GetSectionAlignment());
    m_NewSecHdrs[SHI_CODE].PointerToRawData = m_NewSecHdrs[SHI_SPACE].PointerToRawData + m_NewSecHdrs[SHI_SPACE].SizeOfRawData;
    m_NewSecHdrs[SHI_CODE].SizeOfRawData = m_dwShellCodeSize;
    m_NewSecHdrs[SHI_CODE].Characteristics = IMAGE_SCN_MEM_EXECUTE | IMAGE_SCN_MEM_READ;


    // -被压缩数据节
    MyMemCopy(m_NewSecHdrs[SHI_COM].Name, (LPVOID)".bss", MyStrLen(".bss"));
    m_NewSecHdrs[SHI_COM].VirtualAddress = m_NewSecHdrs[SHI_CODE].VirtualAddress + m_NewSecHdrs[SHI_CODE].Misc.VirtualSize;
    m_NewSecHdrs[SHI_COM].Misc.VirtualSize = CPe::GetAlignSize(m_dwComDataAlignSize, m_PE->GetSectionAlignment());
    m_NewSecHdrs[SHI_COM].PointerToRawData = m_NewSecHdrs[SHI_CODE].PointerToRawData + m_NewSecHdrs[SHI_CODE].SizeOfRawData;
    m_NewSecHdrs[SHI_COM].SizeOfRawData = m_dwComDataAlignSize;
    m_NewSecHdrs[SHI_COM].Characteristics = IMAGE_SCN_MEM_READ;
    m_NewSecHdrs[SHI_COM].PointerToLinenumbers = m_dwComDataSize; // 压缩数据的大小
    m_NewSecHdrs[SHI_COM].PointerToRelocations = m_PE->GetFileSize(); // 被压缩数据的大小


    return TRUE;
}


BOOL CPacker::RebuildPeHeader() {
    // 拷贝原PE头
    m_dwNewPeHeaderSize = m_PE->GetSizeOfHeaders();
    m_pNewPeHeader = new BYTE[m_PE->GetSizeOfHeaders()];
    if (m_pNewPeHeader == NULL) {
        return FALSE;
    }
    ::RtlZeroMemory(m_pNewPeHeader, m_PE->GetSizeOfHeaders());
    MyMemCopy(m_pNewPeHeader, m_PE->GetDosHeaderPointer(), m_PE->GetSizeOfHeaders());

    //修改PE头
    PIMAGE_DOS_HEADER pDosHdr = (PIMAGE_DOS_HEADER)m_pNewPeHeader;
    PIMAGE_NT_HEADERS pNtHdr = (PIMAGE_NT_HEADERS)(m_pNewPeHeader + pDosHdr->e_lfanew);
    PIMAGE_SECTION_HEADER pSecHdrs = (PIMAGE_SECTION_HEADER)((PBYTE)&pNtHdr->OptionalHeader +
        pNtHdr->FileHeader.SizeOfOptionalHeader);

    pNtHdr->FileHeader.NumberOfSections = SHI_COUT;
    pNtHdr->OptionalHeader.AddressOfEntryPoint = m_NewSecHdrs[SHI_CODE].VirtualAddress;
    pNtHdr->OptionalHeader.SizeOfImage = m_NewSecHdrs[SHI_COM].VirtualAddress + m_NewSecHdrs[SHI_COM].Misc.VirtualSize;

    //拷贝节表
    MyMemCopy(pSecHdrs, m_NewSecHdrs, sizeof(m_NewSecHdrs));

    return TRUE;
}


BOOL CPacker::WritePackerFile(const char* pDstPath) {
    HANDLE hFile = CreateFile(pDstPath,
        GENERIC_WRITE,
        FILE_SHARE_READ,
        NULL,
        CREATE_ALWAYS,
        FILE_ATTRIBUTE_NORMAL,
        NULL);
    if (hFile == INVALID_HANDLE_VALUE) {
        return FALSE;
    }

    DWORD dwBytesToWrite = 0;
    //PE头
    if (!WriteFile(hFile, m_pNewPeHeader, m_dwNewPeHeaderSize, &dwBytesToWrite, NULL)) {
        CloseHandle(hFile);
        return FALSE;
    }

    //壳代码节
    if (!WriteFile(hFile, m_pShellCodeBuff, m_dwShellCodeSize, &dwBytesToWrite, NULL)) {
        CloseHandle(hFile);
        return FALSE;
    }

    //压缩数据节
    if (!WriteFile(hFile, m_pCompressDataBuff, m_dwComDataAlignSize, &dwBytesToWrite, NULL)) {
        CloseHandle(hFile);
        return FALSE;
    }

    //关闭文件
    CloseHandle(hFile);


    // 释放资源
    if (m_pCompressDataBuff != NULL) {
        delete[] m_pCompressDataBuff;
        m_pCompressDataBuff = NULL;
    }

    if (m_pNewPeHeader != NULL) {
        delete[] m_pNewPeHeader;
        m_pNewPeHeader = NULL;
    }
    return TRUE;
}
